generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id
  username    String      @unique
  name        String
  avatar       String?
  bio         String?
  posts     Post[]   // One-to-many relation: One user can have many posts
  admitted   Boolean     @default(false)
  communityMemberships   CommunityMembership[]   // One-to-many relation: One user can be a member of many communities
  createdCommunities   Community[]   @relation("CreatedBy")   // One-to-many relation: One user can create many communities
}

model Post {
  id          Int      @id @default(autoincrement())
  text        String
  author      User        @relation(fields: [authorId], references: [id])   // Many-to-one relation: Many posts can be authored by one user
  authorId    String
  community   Community?  @relation(fields: [communityId], references: [id])   // Many-to-one relation: Many posts can belong to one community
  communityId String?
  createdAt   DateTime    @default(now())
  parentId    Int?
  parent      Post?     @relation("PostToPost", fields: [parentId], references: [id])   // Self-relation: A post can be a parent of other posts
  children    Post[]    @relation("PostToPost")   // Self-relation: A post can have many child posts
}

model Community {
  id          String      @id
  username    String      @unique
  name        String
  avatar       String?
  bio         String?
  createdBy User?     @relation("CreatedBy", fields: [createdById], references: [id])   // Many-to-one relation: Many communities can be created by one user
  createdById String?
  posts     Post[]   // One-to-many relation: One community can have many posts
  communityMemberships   CommunityMembership[]   // One-to-many relation: One community can have many members
}

model CommunityMembership {
  userId       String
  communityId  String
  user         User         @relation(fields: [userId], references: [id])   // Many-to-one relation: Many memberships can belong to one user
  community    Community    @relation(fields: [communityId], references: [id])   // Many-to-one relation: Many memberships can belong to one community

  @@id([userId, communityId])   // Composite primary key: A combination of userId and communityId uniquely identifies a membership
}